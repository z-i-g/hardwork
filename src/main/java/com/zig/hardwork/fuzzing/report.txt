1. Проект написан на Java 11;

2. Строк кода - 3856;

3. Сложности:
Как в Вашем одном посте было написано, что если при тестировании приходится много-чего "мокать", то это явный признак
неправильной архитектуры и кодирования. Еще при написании юнит тестов на этот сервис поймал себя на этой мысли.

4. Ошибки:
Писал тесты с помощью Jazzer в стиле JUnit, в среднем выходило от 2 до 5 ошибок на метод.
В основном ошибки были с NPE и ошибками при числовых расчетах (деление на 0, отрицательные значения). Тестируемый сервис
имел много методов с арифметическими операциями (связан с расчетами процентных ставок и одобренных сумм).
Когда писали этот сервис (один из первых, в котором я активно участвовал), я налепил везде проверки на null, но техлид
сделал замечание, что многие даные уже валидируются в другом сервисе, который отрабатывает до текущего. И далее я
смотрел уже на схему xml/json, то есть обязательные поля с явным указанием диапазонов значений не проверял.

5. Выводы:
Ранее никогда не использовал фазз-тестирование, плюсы конечно же есть. Уже по найденным ошибкам задумываешься,
а действительно, может же быть такое. Уже в дальнейшем написании кода в голове всегда держаться возможные необходимые
проверки.
И по поводу валидации в схеме описанной выше. Лучше всегда проверить на явные кривые или отсутствие данных, т.к. условно
сегодня какие-то поля обязательные в схеме, а завтра уже нет.